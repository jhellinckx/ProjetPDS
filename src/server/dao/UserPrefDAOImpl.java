package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import static dao.DAOUtilitaire.*;


import items.Food;
import items.User;

public class UserPrefDAOImpl implements UserPrefDAO {
	private DAOFactory daoFactory;
	private static final String SQL_INSERT = "INSERT INTO User_preferences (numUser,numFood,rank) VALUES (?,?,?)";
	private static final String SQL_FIND_USER_DE_APPRECIATED_FOOD = "SELECT numFood FROM User_preferences WHERE numUser = ? and rank = ?";
	private static final String SQL_FIND_USERS_APPRECIATING_FOOD = "SELECT numUser FROM User_preferences WHERE numFood = ?";
	private static final String SQL_DELETE = "DELETE FROM User_preferences WHERE numUser = ? AND numFood = ? AND rank = ?";
	private static final String SQL_UPDATE = "UPDATE User_preferences SET numFood = ? WHERE numUser = ?";

	private static final String	SQL_FIND_USER_RANK = "SELECT numFood, rank FROM User_preferences WHERE numUser = ?";
	private static final String SQL_FIND_FOOD_RANK = "SELECT numUser, rank FROM User_preferences WHERE numFood = ?";
	
	UserPrefDAOImpl( DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
	@Override
	public void create(User user, Food food, String rank) throws IllegalArgumentException, DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializationPreparedRequest( connection, SQL_INSERT, false, user.getId(), food.getId(), rank );
			int statut = preparedStatement.executeUpdate();
			if (statut == 0) {
				throw new DAOException ("Failed to create a user preference, no new line added to the DB");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			silentClosures( autoGeneratedValues, preparedStatement, connection );
		}
	}

	@Override
	public void create(Long id_user, Long id_food, String rank) throws IllegalArgumentException, DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializationPreparedRequest( connection, SQL_INSERT, false, id_user, id_food, rank );
			int statut = preparedStatement.executeUpdate();
			if (statut == 0) {
				throw new DAOException ("Failed to create a user preference, no new line added to the DB");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			silentClosures(preparedStatement, connection );
		}
	}

	@Override
	public List<Food> findUserAppreciatedFood(User user) throws DAOException {
		return findDe_AppreciatedFood( user , "+" );
	}
	
	@Override
	public List<Food> findUserDeppreciatedFood(User user) throws DAOException {
		return findDe_AppreciatedFood( user , "-" );
	}
	
	@Override
	public List<User> findUsersAppreciating(Food food) throws DAOException {
		List<User> usersAppreciatingFood = new ArrayList<User>();
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		UserDAO userDAO = null;
		
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializationPreparedRequest( connection, SQL_FIND_USERS_APPRECIATING_FOOD, false, food.getId() );
			resultSet = preparedStatement.executeQuery();
			userDAO = this.daoFactory.getUserDAO();
			while (resultSet.next()) {
				Long idUser = (long) resultSet.getInt("numUser");
				User user = userDAO.findById(idUser);
				usersAppreciatingFood.add(user);
			}
		} catch (SQLException e) {
			throw new DAOException (e);
		} finally {
			silentClosures( resultSet, preparedStatement, connection );
		}
		return usersAppreciatingFood;
	}
	

	@Override
	public void delete(User user, Food food, String rank) throws IllegalArgumentException, DAOException {
	Connection connection = null;
    PreparedStatement preparedStatement = null;

    try {
        connection = daoFactory.getConnection();
        preparedStatement = initializationPreparedRequest( connection, SQL_DELETE, false, user.getId(), food.getId(), rank);
        int statut = preparedStatement.executeUpdate();
        if ( statut == 0 ) {
            throw new DAOException( "Failed to delete the user preference, no modifications to the table." );
        }
    } catch ( SQLException e ) {
        throw new DAOException( e );
    } finally {
        silentClosures( preparedStatement, connection );
    }
    }
	
	private List<Food> findDe_AppreciatedFood( User user, String rank ) {
		List<Food> appreciatedFood = new ArrayList<Food>();
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		FoodDAO foodDAO = null;
		
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializationPreparedRequest( connection, SQL_FIND_USER_DE_APPRECIATED_FOOD, false, user.getId(), rank );
			resultSet = preparedStatement.executeQuery();
			foodDAO = this.daoFactory.getFoodDAO();
			while (resultSet.next()) {
				Long idFood = (long) resultSet.getInt("numFood");
				Food food = foodDAO.findById( idFood );
				appreciatedFood.add(food);
			}
		} catch (SQLException e) {
			throw new DAOException (e);
		} finally {
			silentClosures( resultSet, preparedStatement, connection );
		}
		return appreciatedFood;
	}


	@Override
	public HashMap findUsersAndRankForFood(Food food) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		UserDAO userDAO = null;
		HashMap m = new HashMap();// max size = 16 !!!
		
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializationPreparedRequest( connection, SQL_FIND_FOOD_RANK, false, food.getId() );
			resultSet = preparedStatement.executeQuery();
			userDAO = this.daoFactory.getUserDAO();
			while (resultSet.next()) {
				Long idUser = (long) resultSet.getInt("numUser");
				User user = userDAO.findById(idUser);
				String rank = (String) resultSet.getString("rank");
				m.put(user,rank);
			}
		} catch (SQLException e) {
			throw new DAOException (e);
		} finally {
			silentClosures( resultSet, preparedStatement, connection );
		}
		return m ;
	}

	@Override
	public HashMap findFoodsAndRankForUser(User user) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		FoodDAO foodDAO = null;
		HashMap m = new HashMap();// max size = 16 !!!
		
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializationPreparedRequest( connection, SQL_FIND_USER_RANK, false, user.getId() );
			resultSet = preparedStatement.executeQuery();
			foodDAO = this.daoFactory.getFoodDAO();
			while (resultSet.next()) {
				Long idFood = (long) resultSet.getInt("numFood");
				Food food = foodDAO.findById(idFood);
				String rank = (String) resultSet.getString("rank");
				m.put(food,rank);
			}
		} catch (SQLException e) {
			throw new DAOException (e);
		} finally {
			silentClosures( resultSet, preparedStatement, connection );
		}
		return m ;
	}
}
